# Required Qt5 libraries
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer

# Custom widget library by Martin Fitzpatrick (mfitzp) available on pypi 
from qtwidgets import AnimatedToggle

# Time library for the clock
import time
from time import sleep
from math import sin
from threading import Thread

# PySerial library for microcontroller access
import serial, serial.tools.list_ports

# Import pglive libraries for live data plotting
from pglive.sources.data_connector import DataConnector
from pglive.sources.live_plot import LiveLinePlot
from pglive.sources.live_plot_widget import LivePlotWidget
import pyqtgraph

# Import the UI python files generated by pyuic5
from mainscreen import Ui_MainWindow
from telemetryscreen import Ui_telemetryScreen

# Set DPI scaling to play nice with Windows (I found this on StackOverflow)
QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True) #enable highdpi scaling
QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True) #use highdpi icons

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.telemetry(self)


        # Replace all the default AnimatedToggles in the autogen file WHY IS THERE NO METHOD TO SPECIFY CONSTRUCTOR PARAMS GRRR
        # Scuffed but it works and hey it has color yippee.mp5
        self.ui.isoTog1 = AnimatedToggle(self.ui.valveBox, checked_color="#1b9611", bar_color=Qt.red, pulse_unchecked_color="#f1807e", pulse_checked_color="#a9f0d7")
        self.ui.isoRow.replaceWidget(self.ui.isoTog1_old, self.ui.isoTog1)
        self.ui.isoTog1_old.deleteLater()
        self.ui.isoTog2 = AnimatedToggle(self.ui.valveBox, checked_color="#1b9611", bar_color=Qt.red, pulse_unchecked_color="#f1807e", pulse_checked_color="#a9f0d7")
        self.ui.isoRow.replaceWidget(self.ui.isoTog2_old, self.ui.isoTog2)
        self.ui.isoTog2_old.deleteLater()
        self.ui.mainTog1 = AnimatedToggle(self.ui.valveBox, checked_color="#1b9611", bar_color=Qt.red, pulse_unchecked_color="#f1807e", pulse_checked_color="#a9f0d7")
        self.ui.mainRow.replaceWidget(self.ui.mainTog1_old, self.ui.mainTog1)
        self.ui.mainTog1_old.deleteLater()
        self.ui.mainTog2 = AnimatedToggle(self.ui.valveBox, checked_color="#1b9611", bar_color=Qt.red, pulse_unchecked_color="#f1807e", pulse_checked_color="#a9f0d7")
        self.ui.mainRow.replaceWidget(self.ui.mainTog2_old, self.ui.mainTog2)
        self.ui.mainTog2_old.deleteLater()
        self.ui.ventTog1 = AnimatedToggle(self.ui.valveBox, checked_color="#1b9611", bar_color=Qt.red, pulse_unchecked_color="#f1807e", pulse_checked_color="#a9f0d7")
        self.ui.ventRow.replaceWidget(self.ui.ventTog1_old, self.ui.ventTog1)
        self.ui.ventTog1_old.deleteLater()
        self.ui.ventTog2 = AnimatedToggle(self.ui.valveBox, checked_color="#1b9611", bar_color=Qt.red, pulse_unchecked_color="#f1807e", pulse_checked_color="#a9f0d7")
        self.ui.ventRow.replaceWidget(self.ui.ventTog2_old, self.ui.ventTog2)
        self.ui.ventTog2_old.deleteLater()

        # Set default valve states
        self.ui.ventTog1.setChecked(True)
        self.ui.ventTog2.setChecked(True)

        # Button connections
        self.ui.isoTog1.clicked.connect(lambda: self.toggleValve("Kero Isol valve (K1)", self.ui.isoTog1.isChecked()))
        self.ui.isoTog2.clicked.connect(lambda: self.toggleValve("LOX Isol valve (K2)", self.ui.isoTog2.isChecked()))
        self.ui.mainTog1.clicked.connect(lambda: self.toggleValve("Kero Main valve (K3)", self.ui.mainTog1.isChecked()))
        self.ui.mainTog2.clicked.connect(lambda: self.toggleValve("LOX Main valve (K4)", self.ui.mainTog2.isChecked()))
        self.ui.ventTog1.clicked.connect(lambda: self.toggleValve("Kero Vent valve (K5)", self.ui.ventTog1.isChecked()))
        self.ui.ventTog2.clicked.connect(lambda: self.toggleValve("LOX Vent valve (K6)", self.ui.ventTog2.isChecked()))
        self.ui.armButton.clicked.connect(self.armAbort)
        self.ui.abortButton.clicked.connect(self.abort)
        self.ui.calibButton.clicked.connect(lambda: self.sequence("Valve calibration"))
        self.ui.pressButton.clicked.connect(lambda: self.sequence("Pressurize tanks"))
        self.ui.leakButton.clicked.connect(lambda: self.sequence("Leak check"))
        self.ui.purgeButton.clicked.connect(lambda: self.toggleValve("Engine purge valve (K7)", self.ui.purgeButton.isChecked()))
        self.ui.startupButton.clicked.connect(lambda: self.sequence("Engine startup"))
        self.ui.commandClear.clicked.connect(self.clearLog)
        self.ui.commandSave.clicked.connect(self.saveLog)


        # Clock
        self.clock = QTimer()
        self.clock.timeout.connect(self.setClock)
        self.clock.start(1000)



        # Initialize the log
        self.actionLog = ""

        # Initialize the serial connection
        self.arduino_path = serial.tools.list_ports.comports()[0].device
        self.connection = serial.Serial(self.arduino_path, 115200, timeout=1)    


        # Initialize the graphs
        self.running = True
        self.tele.nitroGraph.setTitle("Nitrogen Tank Pressure")
        self.tele.nitroGraph.setLabel("left", "Pressure", units="PSI")
        self.tele.nitroPen = pyqtgraph.mkPen('#8AC7DB', width=2)
        self.tele.nitroLine = LiveLinePlot(pen=self.tele.nitroPen)
        self.tele.nitroGraph.addItem(self.tele.nitroLine)
        self.data_connector = DataConnector(self.tele.nitroLine, max_points=600, update_rate=100)

        

        self.tele.tankGraph.setTitle("Kerosene / LOX Tank Pressures")
        self.tele.tankGraph.setLabel("left", "Pressure", units="PSI")


        self.tele.manifoldGraph.setTitle("Kerosene / LOX Manifold Pressures")
        self.tele.tankGraph.setLabel("left", "Pressure", units="PSI")

        
        self.tele.flowGraph.setTitle("Kerosene / LOX Flow Rates")
        self.tele.flowGraph.setLabel("left", "Flow Rate")





    # Enables the ABORT button when ARM is pressed 
    def armAbort(self):
        armButtonStatus = self.ui.armButton.isChecked()
        self.ui.abortButton.setEnabled(armButtonStatus)
        

    # Clock function for timer 
    def setClock(self):
        t = time.time()
        self.ui.timer.setText(f"{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(t))}")

    
    # Function for logging
    def logAction(self, name, state=''):

        t = time.time()
        currentTime = f"{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(t))}"

        self.actionLog += f"{currentTime} - {name} {state}\n"
        self.ui.log.setText(self.actionLog)
        self.ui.scrollArea.verticalScrollBar().setValue(self.ui.scrollArea.verticalScrollBar().maximum())

    
    # Clear the log
    def clearLog(self):
        self.actionLog = ""
        self.ui.log.setText(self.actionLog)


    def abort(self):
        
        # Send abort through serial     
        self.connection.write(b'9\n')
        self.logAction("Abort Called")
        self.ui.purgeButton.toggle()   

    def toggleValve(self, name, state):

        valveStatus = "opened" if state else "closed"
        self.logAction(name, valveStatus)

        match(name):
            case "Kero Isol valve (K1)":
                self.connection.write(b'1\n')
                
            case "LOX Isol valve (K2)":
                self.connection.write(b'2\n')

            case "Kero Main valve (K3)":
                self.connection.write(b'3\n')
                
            case "LOX Main valve (K4)":
                self.connection.write(b'4\n')

            case "Kero Vent valve (K5)":
                self.connection.write(b'5\n')

            case "LOX Vent valve (K6)":
                self.connection.write(b'6\n')

            case "Engine purge valve (K7)":
                self.connection.write(b'9\n')
                
            
    
            
        

        
    def sequence(self, name):

        self.logAction(name, "commanded")

        match(name):
            case "Valve calibration":
                self.connection.write(b'7\n')

                # Update button state
                self.ui.isoTog1.toggle()
                QTimer.singleShot(1000, lambda: self.ui.isoTog1.toggle())

                QTimer.singleShot(1000, lambda: self.ui.isoTog2.toggle())      
                QTimer.singleShot(2000, lambda: self.ui.isoTog2.toggle())

                QTimer.singleShot(2000, lambda: self.ui.mainTog1.toggle())      
                QTimer.singleShot(3000, lambda: self.ui.mainTog1.toggle())

                QTimer.singleShot(3000, lambda: self.ui.mainTog2.toggle())      
                QTimer.singleShot(4000, lambda: self.ui.mainTog2.toggle())

                QTimer.singleShot(4000, lambda: self.ui.ventTog1.toggle())      
                QTimer.singleShot(5000, lambda: self.ui.ventTog1.toggle())

                QTimer.singleShot(5000, lambda: self.ui.ventTog2.toggle())      
                QTimer.singleShot(6000, lambda: self.ui.ventTog2.toggle())
                 

                
            case "Engine startup":
                self.connection.write(b'8\n')
                self.ui.mainTog1.toggle()
                self.ui.mainTog2.toggle()


            # NO LEAK CHECK IN INO CODE YET
            case "Leak check":
                self.connection.write(b'\n')

            case "Pressurize tanks":
                self.connection.write(b"10\n")
                self.ui.isoTog1.toggle()
                self.ui.isoTog2.toggle()
                

        
        
        


    def saveLog(self):

        # For some reason, getSaveFileName returns a tuple. I found this workaround on StackOverflow lolololol
        fileName, filter = QtWidgets.QFileDialog.getSaveFileName(None, "Save log file", None, "(*.txt)")
        with open(fileName + ".txt", 'w') as save_file:
            save_file.write(self.actionLog)

    
    def telemetry(self, MainWindow):
        self.window = QtWidgets.QMainWindow()
        self.tele = Ui_telemetryScreen()
        self.tele.setupUi(self.window)
        self.window.show()


    def sin_wave_generator(self, connector):
        """Sine wave generator"""
        x = 0
        while self.running:
            x += 1
            data_point = sin(x * 0.01)
            # Callback to plot new data point
            connector.cb_append_data_point(data_point, x)

            sleep(0.01)

    def closeEvent(self, event):
        self.running = False


if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    Thread(target=window.sin_wave_generator, args=(window.data_connector,)).start()
    sys.exit(app.exec_())

    
    